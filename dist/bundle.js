!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){(function(e){const t=o(1),n=o(2),r=t();r.get("/api/ping",(e,t)=>{console.log("❇️ Received GET request to /api/ping"),t.send("pong!")});const i=o(3);let l;Object.keys(i).forEach(e=>{if(i.hasOwnProperty(e)&&"default"!==e){const t=i[e],{method:o,cb:l}=t;let u=t.path;u.startsWith("/api")||(u=n.join("/api",u).replace(/\\/g,"/")),r[o](u,l)}}),console.log("❇️ NODE_ENV is","production"),l=process.env.PORT||3e3,r.use(t.static(n.join(e,"../build"))),r.get("*",(t,o)=>{console.log(e),console.log(n.join(e,"../build","index.html")),o.sendFile(n.join(e,"../build","index.html"),{root:e})});const u=r.listen(l,()=>{console.log("❇️ Express server is running on port",u.address().port)})}).call(this,"server")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("path")},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=o(4);t.Hello=n.default},function(e,t,o){"use strict";var n=this;Object.defineProperty(t,"__esModule",{value:!0});var r={method:"get",path:"/hello",cb:function(e,t){console.log("❇️ Received GET request to "+n.path),t.send("hello world")}};t.default=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImV4cHJlc3NcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJwYXRoXCIiLCJ3ZWJwYWNrOi8vLy4vc2VydmVyL2NvbnRyb2xsZXJzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NlcnZlci9jb250cm9sbGVycy9IZWxsby50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInBhdGgiLCJhcHAiLCJleHByZXNzIiwicmVxdWVzdCIsInJlc3BvbnNlIiwiY29uc29sZSIsImxvZyIsInNlbmQiLCJDdHJscyIsInBvcnQiLCJrZXlzIiwiZm9yRWFjaCIsIm9iaiIsIm1ldGhvZCIsImNiIiwiYXBpX3BhdGgiLCJzdGFydHNXaXRoIiwiam9pbiIsInJlcGxhY2UiLCJwcm9jZXNzIiwiZW52IiwiUE9SVCIsInVzZSIsInN0YXRpYyIsIl9fZGlybmFtZSIsInNlbmRGaWxlIiwicm9vdCIsImxpc3RlbmVyIiwibGlzdGVuIiwiYWRkcmVzcyIsInJlcXVpcmUiLCJkZWZhdWx0IiwiSGVsbG8iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRGLEVBQW1CLElBQUksSUFBSU0sS0FBT04sRUFBT3JCLEVBQW9CVSxFQUFFZSxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT04sRUFBTU0sSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSekIsRUFBb0I2QixFQUFJLFNBQVMxQixHQUNoQyxJQUFJUyxFQUFTVCxHQUFVQSxFQUFPcUIsV0FDN0IsV0FBd0IsT0FBT3JCLEVBQWdCLFNBQy9DLFdBQThCLE9BQU9BLEdBRXRDLE9BREFILEVBQW9CVSxFQUFFRSxFQUFRLElBQUtBLEdBQzVCQSxHQUlSWixFQUFvQmEsRUFBSSxTQUFTaUIsRUFBUUMsR0FBWSxPQUFPakIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLdUIsRUFBUUMsSUFHekcvQixFQUFvQmtDLEVBQUksR0FJakJsQyxFQUFvQkEsRUFBb0JtQyxFQUFJLEcsbUJDbEZyRCxvQkFBZ0IsRUFBUSxHQUNsQkMsRUFBTyxFQUFRLEdBRWZDLEVBQU1DLElBZVpELEVBQUlwQixJQUFJLFlBQWEsQ0FBQ3NCLEVBQVNDLEtBQzNCQyxRQUFRQyxJQUFJLHdDQUNaRixFQUFTRyxLQUFLLFdBR2xCLE1BQU1DLEVBQVEsRUFBUSxHQWN0QixJQUFJQyxFQWJKL0IsT0FBT2dDLEtBQUtGLEdBQU9HLFFBQVNwQixJQUN4QixHQUFJaUIsRUFBTVgsZUFBZU4sSUFBZ0IsWUFBUkEsRUFBbUIsQ0FDaEQsTUFBTXFCLEVBQU1KLEVBQU1qQixJQUNaLE9BQUVzQixFQUFNLEdBQUVDLEdBQU9GLEVBQ3ZCLElBQUlHLEVBQVdILEVBQUlaLEtBQ2RlLEVBQVNDLFdBQVcsVUFDckJELEVBQVdmLEVBQUtpQixLQUFLLE9BQVFGLEdBQVVHLFFBQVEsTUFBTSxNQUV6RGpCLEVBQUlZLEdBQVFFLEVBQVVELE1BTTlCVCxRQUFRQyxJQUFJLGlCQUFrQixjQUUxQkcsRUFBT1UsUUFBUUMsSUFBSUMsTUFBUSxJQUMzQnBCLEVBQUlxQixJQUFJcEIsRUFBUXFCLE9BQU92QixFQUFLaUIsS0FBS08sRUFBVyxjQUM1Q3ZCLEVBQUlwQixJQUFJLElBQUssQ0FBQ3NCLEVBQVNDLEtBQ25CQyxRQUFRQyxJQUFJa0IsR0FDWm5CLFFBQVFDLElBQUlOLEVBQUtpQixLQUFLTyxFQUFXLFdBQVksZUFDN0NwQixFQUFTcUIsU0FBU3pCLEVBQUtpQixLQUFLTyxFQUFXLFdBQVksY0FBZSxDQUFDRSxLQUFNRixNQVdqRixNQUFNRyxFQUFXMUIsRUFBSTJCLE9BQU9uQixFQUFNLEtBQzlCSixRQUFRQyxJQUFJLHVDQUF3Q3FCLEVBQVNFLFVBQVVwQixVLG1DQ3pEM0UxQyxFQUFPRCxRQUFVZ0UsUUFBUSxZLGNDQXpCL0QsRUFBT0QsUUFBVWdFLFFBQVEsUyw4RUNBekIsV0FBUSxVQUFBQyxTLDZCQ0FSLFcsaURBRUEsSUFBTUMsRUFBb0IsQ0FDdEJuQixPQUFRLE1BQ1JiLEtBQU0sU0FDTmMsR0FBSSxTQUFDWCxFQUFTQyxHQUNWQyxRQUFRQyxJQUFJLDhCQUFnQyxFQUFLTixNQUNqREksRUFBU0csS0FBSyxpQkFJdEIsVUFBZXlCIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTtcclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG5cclxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xyXG5cclxuLy8gLy8gUFdBcyB3YW50IEhUVFBTIVxyXG4vLyBmdW5jdGlvbiBjaGVja0h0dHBzKHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0KSB7XHJcbi8vICAgICAvLyBDaGVjayB0aGUgcHJvdG9jb2wg4oCUwqBpZiBodHRwLCByZWRpcmVjdCB0byBodHRwcy5cclxuLy8gICAgIGlmIChyZXF1ZXN0LmdldChcIlgtRm9yd2FyZGVkLVByb3RvXCIpLmluZGV4T2YoXCJodHRwc1wiKSAhPSAtMSkge1xyXG4vLyAgICAgICAgIHJldHVybiBuZXh0KCk7XHJcbi8vICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICAgIHJlc3BvbnNlLnJlZGlyZWN0KFwiaHR0cHM6Ly9cIiArIHJlcXVlc3QuaG9zdG5hbWUgKyByZXF1ZXN0LnVybCk7XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcbi8vIGFwcC5hbGwoXCIqXCIsIGNoZWNrSHR0cHMpO1xyXG5cclxuLy8gQSB0ZXN0IHJvdXRlIHRvIG1ha2Ugc3VyZSB0aGUgc2VydmVyIGlzIHVwLlxyXG5hcHAuZ2V0KFwiL2FwaS9waW5nXCIsIChyZXF1ZXN0LCByZXNwb25zZSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coXCLinYfvuI8gUmVjZWl2ZWQgR0VUIHJlcXVlc3QgdG8gL2FwaS9waW5nXCIpO1xyXG4gICAgcmVzcG9uc2Uuc2VuZChcInBvbmchXCIpO1xyXG59KTtcclxuXHJcbmNvbnN0IEN0cmxzID0gcmVxdWlyZSgnLi9jb250cm9sbGVycy9pbmRleC50cycpO1xyXG5PYmplY3Qua2V5cyhDdHJscykuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICBpZiAoQ3RybHMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBrZXkgIT09ICdkZWZhdWx0Jykge1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IEN0cmxzW2tleV07XHJcbiAgICAgICAgY29uc3QgeyBtZXRob2QsIGNiIH0gPSBvYmo7XHJcbiAgICAgICAgbGV0IGFwaV9wYXRoID0gb2JqLnBhdGg7XHJcbiAgICAgICAgaWYgKCFhcGlfcGF0aC5zdGFydHNXaXRoKCcvYXBpJykpIHtcclxuICAgICAgICAgICAgYXBpX3BhdGggPSBwYXRoLmpvaW4oJy9hcGknLCBhcGlfcGF0aCkucmVwbGFjZSgvXFxcXC9nLFwiL1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXBwW21ldGhvZF0oYXBpX3BhdGgsIGNiKTtcclxuICAgIH1cclxufSlcclxuXHJcbi8vIEV4cHJlc3MgcG9ydC1zd2l0Y2hpbmcgbG9naWNcclxubGV0IHBvcnQ7XHJcbmNvbnNvbGUubG9nKFwi4p2H77iPIE5PREVfRU5WIGlzXCIsIHByb2Nlc3MuZW52Lk5PREVfRU5WKTtcclxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcImRldmVsb3BtZW50XCIpIHtcclxuICAgIHBvcnQgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDA7XHJcbiAgICBhcHAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUsIFwiLi4vYnVpbGRcIikpKTtcclxuICAgIGFwcC5nZXQoXCIqXCIsIChyZXF1ZXN0LCByZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKF9fZGlybmFtZSk7XHJcbiAgICAgICAgY29uc29sZS5sb2cocGF0aC5qb2luKF9fZGlybmFtZSwgXCIuLi9idWlsZFwiLCBcImluZGV4Lmh0bWxcIikpO1xyXG4gICAgICAgIHJlc3BvbnNlLnNlbmRGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsIFwiLi4vYnVpbGRcIiwgXCJpbmRleC5odG1sXCIpLCB7cm9vdDogX19kaXJuYW1lfSk7XHJcbiAgICB9KTtcclxufSBlbHNlIHtcclxuICAgIHBvcnQgPSAzMDAxO1xyXG4gICAgY29uc29sZS5sb2coXCLimqDvuI8gTm90IHNlZWluZyB5b3VyIGNoYW5nZXMgYXMgeW91IGRldmVsb3A/XCIpO1xyXG4gICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgXCLimqDvuI8gRG8geW91IG5lZWQgdG8gc2V0ICdzdGFydCc6ICducG0gcnVuIGRldmVsb3BtZW50JyBpbiBwYWNrYWdlLmpzb24/XCJcclxuICAgICk7XHJcbn1cclxuXHJcbi8vIFN0YXJ0IHRoZSBsaXN0ZW5lciFcclxuY29uc3QgbGlzdGVuZXIgPSBhcHAubGlzdGVuKHBvcnQsICgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKFwi4p2H77iPIEV4cHJlc3Mgc2VydmVyIGlzIHJ1bm5pbmcgb24gcG9ydFwiLCBsaXN0ZW5lci5hZGRyZXNzKCkucG9ydCk7XHJcbn0pO1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJleHByZXNzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInBhdGhcIik7IiwiZXhwb3J0IHtkZWZhdWx0IGFzIEhlbGxvfSBmcm9tICcuL0hlbGxvJztcclxuIiwiaW1wb3J0IENvbnRyb2xsZXIgZnJvbSBcIi4vQ29udHJvbGxlclwiO1xyXG5cclxuY29uc3QgSGVsbG86IENvbnRyb2xsZXIgPSB7XHJcbiAgICBtZXRob2Q6ICdnZXQnLFxyXG4gICAgcGF0aDogJy9oZWxsbycsXHJcbiAgICBjYjogKHJlcXVlc3QsIHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCLinYfvuI8gUmVjZWl2ZWQgR0VUIHJlcXVlc3QgdG8gXCIgKyB0aGlzLnBhdGgpO1xyXG4gICAgICAgIHJlc3BvbnNlLnNlbmQoXCJoZWxsbyB3b3JsZFwiKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhlbGxvOyJdLCJzb3VyY2VSb290IjoiIn0=